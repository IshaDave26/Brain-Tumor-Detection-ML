# -*- coding: utf-8 -*-
"""A066_A102_A108_ANN+CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19jw8348tjx2ktm4MHQqQ45XWHNlbXlWL
"""

#importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.preprocessing import LabelEncoder

import tensorflow as tf
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

from keras.preprocessing.image import ImageDataGenerator
from keras.utils import array_to_img, img_to_array, load_img

# Load the image data and labels
data = pd.read_csv('/content/Brain Tumor test.csv')

# Modify the 'Image' column to include the full path to the images
data['Image'] = '/content/Brain Tumor/' + data['Image']

# Load the images and their labels into arrays
X = []
Y = []
for i in range(len(data)):
    img = Image.open(str(data['Image'][i]) + '.jpg')
    img = img.resize((128, 128))
    X.append(np.array(img))
    Y.append(data['Class'][i])
X = np.array(X) / 255.0

# Convert the labels to numerical values
le = LabelEncoder()
Y = le.fit_transform(Y)

# Split the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)

# Data augmentation
datagen = ImageDataGenerator(
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

# Build the model
model = Sequential()

model.add(Conv2D(32, (3,3), activation='relu', input_shape=(128, 128, 3)))
model.add(MaxPooling2D((2,2)))

model.add(Conv2D(64, (3,3), activation='relu'))
model.add(MaxPooling2D((2,2)))

model.add(Flatten())
model.add(Dense(128, activation='relu'))

# Output layer with a single neuron and sigmoid activation function
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history=model.fit(datagen.flow(np.array(X_train), np.array(Y_train), batch_size=32), 
          epochs=10, 
          validation_data=(np.array(X_test), np.array(Y_test)))

import matplotlib.pyplot as plt
import seaborn as sns

# Plot the training loss and accuracy
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.show()
# Calculate and print the accuracy score
test_loss, test_acc = model.evaluate(np.array(X_test), np.array(Y_test))
print('Test accuracy:', test_acc)
# Plot the confusion matrix
Y_pred = model.predict(X_test)
Y_pred_classes = np.round(Y_pred)
confusion_mtx = confusion_matrix(Y_test, Y_pred_classes)

plt.figure(figsize=(8, 6))
sns.heatmap(confusion_mtx, annot=True, fmt='d')
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()